
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/game/characters/milana within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import milana
# and then refer to everything using milana. prefix
# packages imported by this package listed below:

from . import game
from . import common



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
SkillComposureIndex = 1
SkillMintMistIndex = 2
SkillPrideIndex = 3
SkillRoyalMoveIndex = 0


# ---- Global Variables: can only use functions to access ---
def CharacterMilana():
	"""
	CharacterMilana Gets Go Variable: milana.CharacterMilana
	
	"""
	return game.CharacterData(handle=_game.milana_CharacterMilana())

def Set_CharacterMilana(value):
	"""
	Set_CharacterMilana Sets Go Variable: milana.CharacterMilana
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_CharacterMilana(value.handle)
	else:
		_game.milana_Set_CharacterMilana(value)

def EffectDescMintMist():
	"""
	EffectDescMintMist Gets Go Variable: milana.EffectDescMintMist
	
	"""
	return game.EffectDescription(handle=_game.milana_EffectDescMintMist())

def Set_EffectDescMintMist(value):
	"""
	Set_EffectDescMintMist Sets Go Variable: milana.EffectDescMintMist
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_EffectDescMintMist(value.handle)
	else:
		_game.milana_Set_EffectDescMintMist(value)

def EffectDescStolenHP():
	"""
	EffectDescStolenHP Gets Go Variable: milana.EffectDescStolenHP
	
	"""
	return game.EffectDescription(handle=_game.milana_EffectDescStolenHP())

def Set_EffectDescStolenHP(value):
	"""
	Set_EffectDescStolenHP Sets Go Variable: milana.EffectDescStolenHP
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_EffectDescStolenHP(value.handle)
	else:
		_game.milana_Set_EffectDescStolenHP(value)

def SkillComposure():
	"""
	SkillComposure Gets Go Variable: milana.SkillComposure
	Spend some Stolen HP to heal yourself for up to 20.
	With Mint Mist, heal up to 30.
	
	"""
	return game.SkillData(handle=_game.milana_SkillComposure())

def Set_SkillComposure(value):
	"""
	Set_SkillComposure Sets Go Variable: milana.SkillComposure
	Spend some Stolen HP to heal yourself for up to 20.
	With Mint Mist, heal up to 30.
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_SkillComposure(value.handle)
	else:
		_game.milana_Set_SkillComposure(value)

def SkillMintMist():
	"""
	SkillMintMist Gets Go Variable: milana.SkillMintMist
	You become invisible, your opponent can't debuff you.
	Your Royal Move and Composure become stronger.
	Lasts 2 turns.
	Cooldown: 2.
	
	"""
	return game.SkillData(handle=_game.milana_SkillMintMist())

def Set_SkillMintMist(value):
	"""
	Set_SkillMintMist Sets Go Variable: milana.SkillMintMist
	You become invisible, your opponent can't debuff you.
	Your Royal Move and Composure become stronger.
	Lasts 2 turns.
	Cooldown: 2.
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_SkillMintMist(value.handle)
	else:
		_game.milana_Set_SkillMintMist(value)

def SkillPride():
	"""
	SkillPride Gets Go Variable: milana.SkillPride
	Spend all of your Stolen HP to deal as much Cyan damage.
	Unlocks on turn 8.
	
	"""
	return game.SkillData(handle=_game.milana_SkillPride())

def Set_SkillPride(value):
	"""
	Set_SkillPride Sets Go Variable: milana.SkillPride
	Spend all of your Stolen HP to deal as much Cyan damage.
	Unlocks on turn 8.
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_SkillPride(value.handle)
	else:
		_game.milana_Set_SkillPride(value)

def SkillRoyalMove():
	"""
	SkillRoyalMove Gets Go Variable: milana.SkillRoyalMove
	Deal 12 Green damage and add that to Stolen HP.
	With Mint Mist, deal 20 Green damage instead.
	
	"""
	return game.SkillData(handle=_game.milana_SkillRoyalMove())

def Set_SkillRoyalMove(value):
	"""
	Set_SkillRoyalMove Sets Go Variable: milana.SkillRoyalMove
	Deal 12 Green damage and add that to Stolen HP.
	With Mint Mist, deal 20 Green damage instead.
	
	"""
	if isinstance(value, go.GoClass):
		_game.milana_Set_SkillRoyalMove(value.handle)
	else:
		_game.milana_Set_SkillRoyalMove(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct milana.EffectMintMist
class EffectMintMist(common.DurationExpirable):
	"""Your opponent can't use debuffs on you. Your Royal Move and Composure become stronger.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.milana_EffectMintMist_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'milana.EffectMintMist{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'milana.EffectMintMist ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.milana_EffectMintMist_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.milana_EffectMintMist_Clone(self.handle))
	def IsEffectAllowed(self, eff):
		"""IsEffectAllowed(object eff) bool
		
		IsEffectAllowed reports whether the effect can be applied to a character.
		"""
		return _game.milana_EffectMintMist_IsEffectAllowed(self.handle, eff.handle)

# Python type for struct milana.EffectStolenHP
class EffectStolenHP(common.Collectible):
	"""Damage dealt by Royal Move. You can spend it on Composure heal or Pride damage.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.milana_EffectStolenHP_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'milana.EffectStolenHP{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'milana.EffectStolenHP ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.milana_EffectStolenHP_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.milana_EffectStolenHP_Clone(self.handle))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewEffectMintMist(turnState):
	"""NewEffectMintMist(object turnState) object"""
	return EffectMintMist(handle=_game.milana_NewEffectMintMist(turnState.handle))
def NewEffectStolenHP(amount):
	"""NewEffectStolenHP(int amount) object"""
	return EffectStolenHP(handle=_game.milana_NewEffectStolenHP(amount))


# ---- Functions ---


