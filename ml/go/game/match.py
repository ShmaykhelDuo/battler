
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/game/match within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import match
# and then refer to everything using match. prefix
# packages imported by this package listed below:

from . import context
from . import game



# ---- Types ---

# Python type for slice []game.TurnState
class Slice_game_TurnState(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.Slice_game_TurnState_CTor()
			_game.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_game_TurnState.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		s = 'match.Slice_game_TurnState len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'match.Slice_game_TurnState([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _game.Slice_game_TurnState_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _game.Slice_game_TurnState_len(self.handle)
				return Slice_game_TurnState(handle=_game.Slice_game_TurnState_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return game.TurnState(handle=_game.Slice_game_TurnState_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_game.Slice_game_TurnState_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_game_TurnState.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = game.TurnState(handle=_game.Slice_game_TurnState_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_game.Slice_game_TurnState_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---
from enum import Enum

class Result(Enum):
	ResultWonSecond = -1
	ResultDraw = 0
	ResultWonFirst = 1

ResultWonSecond = -1
ResultDraw = 0
ResultWonFirst = 1



#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---

# Python type for interface match.Player
class Player(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = 0
	def RequestSkill(self, ctx):
		"""RequestSkill(object ctx) int, str"""
		return _game.match_Player_RequestSkill(self.handle, ctx.handle)
	def SendEnd(self, ctx):
		"""SendEnd(object ctx) str"""
		return _game.match_Player_SendEnd(self.handle, ctx.handle)
	def SendError(self, ctx, err):
		"""SendError(object ctx, str err) str"""
		return _game.match_Player_SendError(self.handle, ctx.handle, err)
	def SendState(self, ctx, state):
		"""SendState(object ctx, object state) str"""
		return _game.match_Player_SendState(self.handle, ctx.handle, state.handle)


# ---- Structs ---

# Python type for struct match.CharacterPlayer
class CharacterPlayer(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.match_CharacterPlayer_CTor()
			_game.IncRef(self.handle)
			if  0 < len(args):
				self.Character = args[0]
			if "Character" in kwargs:
				self.Character = kwargs["Character"]
			if  1 < len(args):
				self.Player = args[1]
			if "Player" in kwargs:
				self.Player = kwargs["Player"]
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'match.CharacterPlayer{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'match.CharacterPlayer ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Character(self):
		return game.Character(handle=_game.match_CharacterPlayer_Character_Get(self.handle))
	@Character.setter
	def Character(self, value):
		if isinstance(value, go.GoClass):
			_game.match_CharacterPlayer_Character_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Player(self):
		return Player(handle=_game.match_CharacterPlayer_Player_Get(self.handle))
	@Player.setter
	def Player(self, value):
		if isinstance(value, go.GoClass):
			_game.match_CharacterPlayer_Player_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct match.GameState
class GameState(go.GoClass):
	"""GameState is a representation of a state of a game.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.match_GameState_CTor()
			_game.IncRef(self.handle)
			if  0 < len(args):
				self.Character = args[0]
			if "Character" in kwargs:
				self.Character = kwargs["Character"]
			if  1 < len(args):
				self.Opponent = args[1]
			if "Opponent" in kwargs:
				self.Opponent = kwargs["Opponent"]
			if  2 < len(args):
				self.TurnState = args[2]
			if "TurnState" in kwargs:
				self.TurnState = kwargs["TurnState"]
			if  3 < len(args):
				self.SkillsLeft = args[3]
			if "SkillsLeft" in kwargs:
				self.SkillsLeft = kwargs["SkillsLeft"]
			if  4 < len(args):
				self.SkillLog = args[4]
			if "SkillLog" in kwargs:
				self.SkillLog = kwargs["SkillLog"]
			if  5 < len(args):
				self.PlayerTurn = args[5]
			if "PlayerTurn" in kwargs:
				self.PlayerTurn = kwargs["PlayerTurn"]
			if  6 < len(args):
				self.AsOpp = args[6]
			if "AsOpp" in kwargs:
				self.AsOpp = kwargs["AsOpp"]
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'match.GameState{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'match.GameState ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Character(self):
		return game.Character(handle=_game.match_GameState_Character_Get(self.handle))
	@Character.setter
	def Character(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_Character_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Opponent(self):
		return game.Character(handle=_game.match_GameState_Opponent_Get(self.handle))
	@Opponent.setter
	def Opponent(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_Opponent_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def TurnState(self):
		return game.TurnState(handle=_game.match_GameState_TurnState_Get(self.handle))
	@TurnState.setter
	def TurnState(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_TurnState_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def SkillsLeft(self):
		return _game.match_GameState_SkillsLeft_Get(self.handle)
	@SkillsLeft.setter
	def SkillsLeft(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_SkillsLeft_Set(self.handle, value.handle)
		else:
			_game.match_GameState_SkillsLeft_Set(self.handle, value)
	@property
	def SkillLog(self):
		return SkillLog(handle=_game.match_GameState_SkillLog_Get(self.handle))
	@SkillLog.setter
	def SkillLog(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_SkillLog_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def PlayerTurn(self):
		return _game.match_GameState_PlayerTurn_Get(self.handle)
	@PlayerTurn.setter
	def PlayerTurn(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_PlayerTurn_Set(self.handle, value.handle)
		else:
			_game.match_GameState_PlayerTurn_Set(self.handle, value)
	@property
	def AsOpp(self):
		return _game.match_GameState_AsOpp_Get(self.handle)
	@AsOpp.setter
	def AsOpp(self, value):
		if isinstance(value, go.GoClass):
			_game.match_GameState_AsOpp_Set(self.handle, value.handle)
		else:
			_game.match_GameState_AsOpp_Set(self.handle, value)
	def IsEnd(self):
		"""IsEnd() bool"""
		return _game.match_GameState_IsEnd(self.handle)
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the state.
		"""
		return GameState(handle=_game.match_GameState_Clone(self.handle))
	def CloneWithSkill(self, i):
		"""CloneWithSkill(int i) object"""
		return GameState(handle=_game.match_GameState_CloneWithSkill(self.handle, i))

# Python type for struct match.Match
class Match(go.GoClass):
	"""Match is a game between two characters.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.match_Match_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'match.Match{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'match.Match ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Run(self, ctx):
		"""Run(object ctx) str
		
		Run runs the match.
		"""
		return _game.match_Match_Run(self.handle, ctx.handle)
	def Result(self):
		"""Result() int, str"""
		return _game.match_Match_Result(self.handle)


# ---- Slices ---


# ---- Maps ---

# Python type for map match.SkillLog
class SkillLog(go.GoClass):
	"""SkillLog is a log of all skills used.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.match_SkillLog_CTor()
			_game.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Mapping):
					raise TypeError('match_SkillLog.__init__ takes a mapping as argument')
				for k, v in args[0].items():
					_game.match_SkillLog_set(self.handle, k, v)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		s = 'game.match_SkillLog len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' {'
		if len(self) < 120:
			for k, v in self.items():
				s += str(k) + '=' + str(v) + ', '
		return s + '}'
	def __repr__(self):
		s = 'game.match_SkillLog({'
		for k, v in self.items():
			s += str(k) + '=' + str(v) + ', '
		return s + '})'
	def __len__(self):
		return _game.match_SkillLog_len(self.handle)
	def __getitem__(self, key):
		return go.Slice_int(handle=_game.match_SkillLog_elem(self.handle, key.handle))
	def __setitem__(self, key, value):
		_game.match_SkillLog_set(self.handle, key.handle, value.handle)
	def __delitem__(self, key):
		return _game.match_SkillLog_delete(self.handle, key.handle)
	def keys(self):
		return Slice_game_TurnState(handle=_game.match_SkillLog_keys(self.handle))
	def values(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append(self[k])
		return vls
	def items(self):
		vls = []
		kys = self.keys()
		for k in kys:
			vls.append((k, self[k]))
		return vls
	def __iter__(self):
		return iter(self.items())
	def __contains__(self, key):
		return _game.match_SkillLog_contains(self.handle, key.handle)
	def Clone(self):
		"""Clone() object
		
		Clones returns a deep clone of the log.
		"""
		return SkillLog(handle=_game.match_SkillLog_Clone(self.handle))
	def Append(self, turn, skill, goRun=False):
		"""Append(object turn, int skill) """
		_game.match_SkillLog_Append(self.handle, turn.handle, skill, goRun)


# ---- Constructors ---
def New(p1, p2, invertedOrder):
	"""New(object p1, object p2, bool invertedOrder) object
	
	New creates a new match.
	"""
	return Match(handle=_game.match_New(p1.handle, p2.handle, invertedOrder))


# ---- Functions ---


