/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/ShmaykhelDuo/battler/ml/go/game */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "game.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long int handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long int handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long int Slice_bool_CTor();
extern GoInt Slice_bool_len(long long int handle);
extern char Slice_bool_elem(long long int handle, GoInt _idx);
extern long long int Slice_bool_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long int handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long int Slice_byte_CTor();
extern GoInt Slice_byte_len(long long int handle);
extern char Slice_byte_elem(long long int handle, GoInt _idx);
extern long long int Slice_byte_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long int handle, char _vl);
extern long long int Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long int handle);

// --- wrapping slice: []error ---
//
extern long long int Slice_error_CTor();
extern GoInt Slice_error_len(long long int handle);
extern char* Slice_error_elem(long long int handle, GoInt _idx);
extern long long int Slice_error_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long int handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long int Slice_float32_CTor();
extern GoInt Slice_float32_len(long long int handle);
extern float Slice_float32_elem(long long int handle, GoInt _idx);
extern long long int Slice_float32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long int handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long int handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long int Slice_float64_CTor();
extern GoInt Slice_float64_len(long long int handle);
extern double Slice_float64_elem(long long int handle, GoInt _idx);
extern long long int Slice_float64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long int handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long int handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long int Slice_int_CTor();
extern GoInt Slice_int_len(long long int handle);
extern long long int Slice_int_elem(long long int handle, GoInt _idx);
extern long long int Slice_int_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int_append(long long int handle, long long int _vl);

// --- wrapping slice: []int16 ---
//
extern long long int Slice_int16_CTor();
extern GoInt Slice_int16_len(long long int handle);
extern short int Slice_int16_elem(long long int handle, GoInt _idx);
extern long long int Slice_int16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long int handle, GoInt _idx, short int _vl);
extern void Slice_int16_append(long long int handle, short int _vl);

// --- wrapping slice: []int32 ---
//
extern long long int Slice_int32_CTor();
extern GoInt Slice_int32_len(long long int handle);
extern long int Slice_int32_elem(long long int handle, GoInt _idx);
extern long long int Slice_int32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_int32_append(long long int handle, long int _vl);

// --- wrapping slice: []int64 ---
//
extern long long int Slice_int64_CTor();
extern GoInt Slice_int64_len(long long int handle);
extern long long int Slice_int64_elem(long long int handle, GoInt _idx);
extern long long int Slice_int64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_int64_append(long long int handle, long long int _vl);

// --- wrapping slice: []int8 ---
//
extern long long int Slice_int8_CTor();
extern GoInt Slice_int8_len(long long int handle);
extern char Slice_int8_elem(long long int handle, GoInt _idx);
extern long long int Slice_int8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long int handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long int handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long int Slice_rune_CTor();
extern GoInt Slice_rune_len(long long int handle);
extern long int Slice_rune_elem(long long int handle, GoInt _idx);
extern long long int Slice_rune_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long int handle, GoInt _idx, long int _vl);
extern void Slice_rune_append(long long int handle, long int _vl);

// --- wrapping slice: []string ---
//
extern long long int Slice_string_CTor();
extern GoInt Slice_string_len(long long int handle);
extern char* Slice_string_elem(long long int handle, GoInt _idx);
extern long long int Slice_string_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long int handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long int handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long int Slice_uint_CTor();
extern GoInt Slice_uint_len(long long int handle);
extern long long unsigned int Slice_uint_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint16 ---
//
extern long long int Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long int handle);
extern short unsigned int Slice_uint16_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint16_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long int handle, GoInt _idx, short unsigned int _vl);
extern void Slice_uint16_append(long long int handle, short unsigned int _vl);

// --- wrapping slice: []uint32 ---
//
extern long long int Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long int handle);
extern long unsigned int Slice_uint32_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint32_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long int handle, GoInt _idx, long unsigned int _vl);
extern void Slice_uint32_append(long long int handle, long unsigned int _vl);

// --- wrapping slice: []uint64 ---
//
extern long long int Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long int handle);
extern long long unsigned int Slice_uint64_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint64_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long int handle, GoInt _idx, long long unsigned int _vl);
extern void Slice_uint64_append(long long int handle, long long unsigned int _vl);

// --- wrapping slice: []uint8 ---
//
extern long long int Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long int handle);
extern unsigned char Slice_uint8_elem(long long int handle, GoInt _idx);
extern long long int Slice_uint8_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long int handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long int handle, unsigned char _vl);

// --- wrapping slice: [4]*game.Skill ---
//
extern long long int Array_4_Ptr_game_Skill_CTor();
extern GoInt Array_4_Ptr_game_Skill_len(long long int handle);
extern long long int Array_4_Ptr_game_Skill_elem(long long int handle, GoInt _idx);
extern void Array_4_Ptr_game_Skill_set(long long int handle, GoInt _idx, long long int _vl);

// --- wrapping slice: [4]*game.SkillData ---
//
extern long long int Array_4_Ptr_game_SkillData_CTor();
extern GoInt Array_4_Ptr_game_SkillData_len(long long int handle);
extern long long int Array_4_Ptr_game_SkillData_elem(long long int handle, GoInt _idx);
extern void Array_4_Ptr_game_SkillData_set(long long int handle, GoInt _idx, long long int _vl);

// --- wrapping slice: []game.Colour ---
//
extern long long int Slice_game_Colour_CTor();
extern GoInt Slice_game_Colour_len(long long int handle);
extern long long int Slice_game_Colour_elem(long long int handle, GoInt _idx);
extern long long int Slice_game_Colour_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_game_Colour_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_game_Colour_append(long long int handle, long long int _vl);

// --- wrapping slice: []game.Effect ---
//
extern long long int Slice_game_Effect_CTor();
extern GoInt Slice_game_Effect_len(long long int handle);
extern long long int Slice_game_Effect_elem(long long int handle, GoInt _idx);
extern long long int Slice_game_Effect_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_game_Effect_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_game_Effect_append(long long int handle, long long int _vl);

// --- wrapping map: map[game.Colour]int ---
//
extern long long int Map_game_Colour_int_CTor();
extern GoInt Map_game_Colour_int_len(long long int handle);
extern long long int Map_game_Colour_int_elem(long long int handle, long long int _ky);
extern char Map_game_Colour_int_contains(long long int handle, long long int _ky);
extern void Map_game_Colour_int_set(long long int handle, long long int _ky, long long int _vl);
extern void Map_game_Colour_int_delete(long long int handle, long long int _ky);
extern long long int Map_game_Colour_int_keys(long long int handle);
extern long long int game_DealtDamageModifier_ModifyDealtDamage(long long int _handle, long long int dmg, long long int colour);
extern char game_EffectFilter_IsEffectAllowed(long long int _handle, long long int e);
extern char game_HealFilter_IsHealAllowed(long long int _handle, long long int heal);
extern long long int game_SkillUnlockTurnModifier_ModifySkillUnlockTurn(long long int _handle, long long int s, long long int unlockTurn);
extern char game_SkillAvailabilityFilter_IsSkillAvailable(long long int _handle, long long int s);
extern long long int game_SkillsPerTurnHandler_SkillsPerTurn(long long int _handle);
extern long long int game_TakenDamageModifier_ModifyTakenDamage(long long int _handle, long long int dmg, long long int colour);
extern void game_TurnEndHandler_OnTurnEnd(long long int _handle, long long int c, long long int opp, long long int turnState, char goRun);
extern char game_ControlHandler_HasTakenControl(long long int _handle);
extern void game_DefenceModifier_ModifyDefences(long long int _handle, long long int mydef, char goRun);
extern long long int game_Effect_Clone(long long int _handle);
extern long long int game_Effect_Desc(long long int _handle);
extern char game_Expirable_HasExpired(long long int _handle, long long int turnState);

// --- wrapping struct: game.EffectDescription ---
//
extern long long int game_EffectDescription_CTor();
extern char* game_EffectDescription_Name_Get(long long int handle);
extern void game_EffectDescription_Name_Set(long long int handle, char* val);
extern unsigned char game_EffectDescription_Type_Get(long long int handle);
extern void game_EffectDescription_Type_Set(long long int handle, unsigned char val);

// --- wrapping struct: game.Skill ---
//
extern long long int game_Skill_CTor();
extern long long int game_Skill_Desc(long long int _handle);
extern long long int game_Skill_Cooldown(long long int _handle);
extern long long int game_Skill_UnlockTurn(long long int _handle, long long int c);
extern char game_Skill_IsAvailable(long long int _handle, long long int c, long long int opp, long long int turnState);
extern char* game_Skill_Use(long long int _handle, long long int c, long long int opp, long long int turnState);
extern char game_Skill_IsAppropriate(long long int _handle, long long int c, long long int opp, long long int turnState);

// --- wrapping struct: game.SkillData ---
//
extern long long int game_SkillData_CTor();
extern long long int game_SkillData_Desc_Get(long long int handle);
extern void game_SkillData_Desc_Set(long long int handle, long long int val);
extern long long int game_SkillData_Cooldown_Get(long long int handle);
extern void game_SkillData_Cooldown_Set(long long int handle, long long int val);
extern long long int game_SkillData_UnlockTurn_Get(long long int handle);
extern void game_SkillData_UnlockTurn_Set(long long int handle, long long int val);

// --- wrapping struct: game.SkillDescription ---
//
extern long long int game_SkillDescription_CTor();
extern char* game_SkillDescription_Name_Get(long long int handle);
extern void game_SkillDescription_Name_Set(long long int handle, char* val);
extern long long int game_SkillDescription_Colour_Get(long long int handle);
extern void game_SkillDescription_Colour_Set(long long int handle, long long int val);
extern char game_SkillDescription_IsUltimate_Get(long long int handle);
extern void game_SkillDescription_IsUltimate_Set(long long int handle, char val);

// --- wrapping struct: game.TurnState ---
//
extern long long int game_TurnState_CTor();
extern long long int game_TurnState_TurnNum_Get(long long int handle);
extern void game_TurnState_TurnNum_Set(long long int handle, long long int val);
extern char game_TurnState_IsGoingFirst_Get(long long int handle);
extern void game_TurnState_IsGoingFirst_Set(long long int handle, char val);
extern char game_TurnState_IsTurnEnd_Get(long long int handle);
extern void game_TurnState_IsTurnEnd_Set(long long int handle, char val);
extern long long int game_TurnState_WithGoingFirst(long long int _handle, char isGoingFirst);
extern long long int game_TurnState_WithTurnEnd(long long int _handle);
extern char game_TurnState_IsAfter(long long int _handle, long long int other);
extern long long int game_TurnState_AddTurns(long long int _handle, long long int turns, char isOpponentsTurn);
extern long long int game_TurnState_Next(long long int _handle);

// --- wrapping struct: game.Character ---
//
extern long long int game_Character_CTor();
extern long long int game_Character_Desc(long long int _handle);
extern long long int game_Character_HP(long long int _handle);
extern long long int game_Character_MaxHP(long long int _handle);
extern long long int game_Character_Defences(long long int _handle);
extern long long int game_Character_Effects(long long int _handle);
extern long long int game_Character_Skills(long long int _handle);
extern long long int game_Character_LastUsedSkill(long long int _handle);
extern char game_Character_IsControlledByOpp(long long int _handle);
extern long long int game_Character_SkillsPerTurn(long long int _handle);
extern void game_Character_SetMaxHP(long long int _handle, long long int maxHP, char goRun);
extern void game_Character_AddEffect(long long int _handle, long long int eff, char goRun);
extern long long int game_Character_Damage(long long int _handle, long long int opp, long long int dmg, long long int colour);
extern void game_Character_Kill(long long int _handle, char goRun);
extern char game_Character_CanHeal(long long int _handle, long long int heal);
extern long long int game_Character_Heal(long long int _handle, long long int heal);
extern void game_Character_OnTurnEnd(long long int _handle, long long int opp, long long int turnState, char goRun);
extern long long int game_Character_Clone(long long int _handle);
extern long long int game_Character_CloneWithSkill(long long int _handle, long long int i);
extern long long int game_Character_CloneWithoutSkills(long long int _handle);

// --- wrapping struct: game.CharacterData ---
//
extern long long int game_CharacterData_CTor();
extern long long int game_CharacterData_SkillData_Get(long long int handle);
extern long long int game_CharacterData_Desc_Get(long long int handle);
extern void game_CharacterData_Desc_Set(long long int handle, long long int val);
extern long long int game_CharacterData_DefaultHP_Get(long long int handle);
extern void game_CharacterData_DefaultHP_Set(long long int handle, long long int val);
extern long long int game_CharacterData_Defences_Get(long long int handle);
extern void game_CharacterData_Defences_Set(long long int handle, long long int val);

// --- wrapping struct: game.CharacterDescription ---
//
extern long long int game_CharacterDescription_CTor();
extern char* game_CharacterDescription_Name_Get(long long int handle);
extern void game_CharacterDescription_Name_Set(long long int handle, char* val);
extern long long int game_CharacterDescription_Number_Get(long long int handle);
extern void game_CharacterDescription_Number_Set(long long int handle, long long int val);
extern long long int game_NewSkill(long long int data);
extern long long int game_StartTurnState();
extern long long int game_NewTurnState(long long int turnNum);
extern long long int game_NewCharacter(long long int data);

// ---- Global Variables: can only use functions to access ---
//
extern long long int characters_Hmm();
extern void characters_Set_Hmm(long long int val);

// ---- Global Variables: can only use functions to access ---
//
extern long long int euphoria_CharacterEuphoria();
extern void euphoria_Set_CharacterEuphoria(long long int val);
extern long long int euphoria_EffectDescEuphoricHeal();
extern void euphoria_Set_EffectDescEuphoricHeal(long long int val);
extern long long int euphoria_EffectDescEuphoricSource();
extern void euphoria_Set_EffectDescEuphoricSource(long long int val);
extern long long int euphoria_EffectDescUltimateEarly();
extern void euphoria_Set_EffectDescUltimateEarly(long long int val);
extern long long int euphoria_SkillAmpleness();
extern void euphoria_Set_SkillAmpleness(long long int val);
extern long long int euphoria_SkillEuphoria();
extern void euphoria_Set_SkillEuphoria(long long int val);
extern long long int euphoria_SkillExuberance();
extern void euphoria_Set_SkillExuberance(long long int val);
extern long long int euphoria_SkillPinkSphere();
extern void euphoria_Set_SkillPinkSphere(long long int val);

// --- wrapping struct: euphoria.EffectEuphoricHeal ---
//
extern long long int euphoria_EffectEuphoricHeal_CTor();
extern long long int euphoria_EffectEuphoricHeal_Desc(long long int _handle);
extern long long int euphoria_EffectEuphoricHeal_Clone(long long int _handle);
extern void euphoria_EffectEuphoricHeal_OnTurnEnd(long long int _handle, long long int c, long long int opp, long long int turnState, char goRun);

// --- wrapping struct: euphoria.EffectEuphoricSource ---
//
extern long long int euphoria_EffectEuphoricSource_CTor();
extern long long int euphoria_EffectEuphoricSource_Desc(long long int _handle);
extern long long int euphoria_EffectEuphoricSource_Clone(long long int _handle);

// --- wrapping struct: euphoria.EffectUltimateEarly ---
//
extern long long int euphoria_EffectUltimateEarly_CTor();
extern long long int euphoria_EffectUltimateEarly_Desc(long long int _handle);
extern long long int euphoria_EffectUltimateEarly_Clone(long long int _handle);
extern long long int euphoria_EffectUltimateEarly_Amount(long long int _handle);
extern void euphoria_EffectUltimateEarly_Increase(long long int _handle, char goRun);
extern long long int euphoria_EffectUltimateEarly_ModifySkillUnlockTurn(long long int _handle, long long int s, long long int unlockTurn);
extern long long int euphoria_NewEffectEuphoricSource(long long int amount);
extern long long int euphoria_NewEffectUltimateEarly();

// ---- Global Variables: can only use functions to access ---
//
extern long long int milana_CharacterMilana();
extern void milana_Set_CharacterMilana(long long int val);
extern long long int milana_EffectDescMintMist();
extern void milana_Set_EffectDescMintMist(long long int val);
extern long long int milana_EffectDescStolenHP();
extern void milana_Set_EffectDescStolenHP(long long int val);
extern long long int milana_SkillComposure();
extern void milana_Set_SkillComposure(long long int val);
extern long long int milana_SkillMintMist();
extern void milana_Set_SkillMintMist(long long int val);
extern long long int milana_SkillPride();
extern void milana_Set_SkillPride(long long int val);
extern long long int milana_SkillRoyalMove();
extern void milana_Set_SkillRoyalMove(long long int val);

// --- wrapping struct: milana.EffectMintMist ---
//
extern long long int milana_EffectMintMist_CTor();
extern long long int milana_EffectMintMist_Desc(long long int _handle);
extern long long int milana_EffectMintMist_Clone(long long int _handle);
extern char milana_EffectMintMist_IsEffectAllowed(long long int _handle, long long int eff);

// --- wrapping struct: milana.EffectStolenHP ---
//
extern long long int milana_EffectStolenHP_CTor();
extern long long int milana_EffectStolenHP_Desc(long long int _handle);
extern long long int milana_EffectStolenHP_Clone(long long int _handle);
extern long long int milana_NewEffectMintMist(long long int turnState);
extern long long int milana_NewEffectStolenHP(long long int amount);

// ---- Global Variables: can only use functions to access ---
//
extern long long int ruby_CharacterRuby();
extern void ruby_Set_CharacterRuby(long long int val);
extern long long int ruby_EffectDescCannotHeal();
extern void ruby_Set_EffectDescCannotHeal(long long int val);
extern long long int ruby_EffectDescDoubleDamage();
extern void ruby_Set_EffectDescDoubleDamage(long long int val);
extern long long int ruby_SkillDance();
extern void ruby_Set_SkillDance(long long int val);
extern long long int ruby_SkillExecute();
extern void ruby_Set_SkillExecute(long long int val);
extern long long int ruby_SkillRage();
extern void ruby_Set_SkillRage(long long int val);
extern long long int ruby_SkillStop();
extern void ruby_Set_SkillStop(long long int val);

// --- wrapping struct: ruby.EffectCannotHeal ---
//
extern long long int ruby_EffectCannotHeal_CTor();
extern long long int ruby_EffectCannotHeal_Desc(long long int _handle);
extern long long int ruby_EffectCannotHeal_Clone(long long int _handle);
extern char ruby_EffectCannotHeal_IsHealAllowed(long long int _handle, long long int heal);

// --- wrapping struct: ruby.EffectDoubleDamage ---
//
extern long long int ruby_EffectDoubleDamage_CTor();
extern long long int ruby_EffectDoubleDamage_Desc(long long int _handle);
extern long long int ruby_EffectDoubleDamage_Clone(long long int _handle);
extern long long int ruby_EffectDoubleDamage_ModifyDealtDamage(long long int _handle, long long int dmg, long long int colour);
extern long long int ruby_NewEffectCannotHeal(long long int turnState, char isOpp);
extern long long int ruby_NewEffectDoubleDamage(long long int turnState);

// ---- Global Variables: can only use functions to access ---
//
extern long long int speed_CharacterSpeed();
extern void speed_Set_CharacterSpeed(long long int val);
extern long long int speed_EffectDescBlackTokens();
extern void speed_Set_EffectDescBlackTokens(long long int val);
extern long long int speed_EffectDescDamageReduced();
extern void speed_Set_EffectDescDamageReduced(long long int val);
extern long long int speed_EffectDescDefenceReduced();
extern void speed_Set_EffectDescDefenceReduced(long long int val);
extern long long int speed_EffectDescGreenTokens();
extern void speed_Set_EffectDescGreenTokens(long long int val);
extern long long int speed_EffectDescSpedUp();
extern void speed_Set_EffectDescSpedUp(long long int val);
extern long long int speed_SkillRun();
extern void speed_Set_SkillRun(long long int val);
extern long long int speed_SkillSpeed();
extern void speed_Set_SkillSpeed(long long int val);
extern long long int speed_SkillStab();
extern void speed_Set_SkillStab(long long int val);
extern long long int speed_SkillWeaken();
extern void speed_Set_SkillWeaken(long long int val);

// --- wrapping struct: speed.EffectBlackTokens ---
//
extern long long int speed_EffectBlackTokens_CTor();
extern long long int speed_EffectBlackTokens_Desc(long long int _handle);
extern long long int speed_EffectBlackTokens_Clone(long long int _handle);

// --- wrapping struct: speed.EffectDamageReduced ---
//
extern long long int speed_EffectDamageReduced_CTor();
extern long long int speed_EffectDamageReduced_Desc(long long int _handle);
extern long long int speed_EffectDamageReduced_Clone(long long int _handle);
extern long long int speed_EffectDamageReduced_Amount(long long int _handle);
extern void speed_EffectDamageReduced_Increase(long long int _handle, long long int amount, char goRun);
extern long long int speed_EffectDamageReduced_ModifyTakenDamage(long long int _handle, long long int dmg, long long int colour);
extern char speed_EffectDamageReduced_HasExpired(long long int _handle, long long int turnState);

// --- wrapping struct: speed.EffectDefenceReduced ---
//
extern long long int speed_EffectDefenceReduced_CTor();
extern long long int speed_EffectDefenceReduced_Desc(long long int _handle);
extern long long int speed_EffectDefenceReduced_Clone(long long int _handle);
extern void speed_EffectDefenceReduced_ModifyDefences(long long int _handle, long long int mydef, char goRun);

// --- wrapping struct: speed.EffectGreenTokens ---
//
extern long long int speed_EffectGreenTokens_CTor();
extern long long int speed_EffectGreenTokens_Desc(long long int _handle);
extern long long int speed_EffectGreenTokens_Clone(long long int _handle);

// --- wrapping struct: speed.EffectSpedUp ---
//
extern long long int speed_EffectSpedUp_CTor();
extern long long int speed_EffectSpedUp_Desc(long long int _handle);
extern long long int speed_EffectSpedUp_Clone(long long int _handle);
extern long long int speed_EffectSpedUp_SkillsPerTurn(long long int _handle);
extern char speed_EffectSpedUp_IsSkillAvailable(long long int _handle, long long int s);
extern long long int speed_NewEffectBlackTokens(long long int number);
extern long long int speed_NewEffectDamageReduced(long long int amount);
extern long long int speed_NewEffectGreenTokens(long long int number);
extern long long int speed_NewEffectSpedUp(long long int turnState);

// ---- Global Variables: can only use functions to access ---
//
extern long long int storyteller_CharacterStoryteller();
extern void storyteller_Set_CharacterStoryteller(long long int val);
extern long long int storyteller_EffectDescCannotUse();
extern void storyteller_Set_EffectDescCannotUse(long long int val);
extern long long int storyteller_EffectDescControlled();
extern void storyteller_Set_EffectDescControlled(long long int val);
extern long long int storyteller_SkillMyStory();
extern void storyteller_Set_SkillMyStory(long long int val);
extern long long int storyteller_SkillYourColour();
extern void storyteller_Set_SkillYourColour(long long int val);
extern long long int storyteller_SkillYourDream();
extern void storyteller_Set_SkillYourDream(long long int val);
extern long long int storyteller_SkillYourNumber();
extern void storyteller_Set_SkillYourNumber(long long int val);

// --- wrapping struct: storyteller.EffectCannotUse ---
//
extern long long int storyteller_EffectCannotUse_CTor();
extern long long int storyteller_EffectCannotUse_Desc(long long int _handle);
extern long long int storyteller_EffectCannotUse_Clone(long long int _handle);
extern long long int storyteller_EffectCannotUse_Colour(long long int _handle);
extern char storyteller_EffectCannotUse_IsSkillAvailable(long long int _handle, long long int s);

// --- wrapping struct: storyteller.EffectControlled ---
//
extern long long int storyteller_EffectControlled_CTor();
extern long long int storyteller_EffectControlled_Desc(long long int _handle);
extern long long int storyteller_EffectControlled_Clone(long long int _handle);
extern char storyteller_EffectControlled_HasTakenControl(long long int _handle);
extern long long int storyteller_NewEffectCannotUse(long long int turnState, long long int colour);
extern long long int storyteller_NewEffectControlled(long long int turnState);

// ---- Global Variables: can only use functions to access ---
//
extern long long int structure_CharacterStructure();
extern void structure_Set_CharacterStructure(long long int val);
extern long long int structure_EffectDescIBoost();
extern void structure_Set_EffectDescIBoost(long long int val);
extern long long int structure_EffectDescLastChance();
extern void structure_Set_EffectDescLastChance(long long int val);
extern long long int structure_EffectDescSLayers();
extern void structure_Set_EffectDescSLayers(long long int val);
extern long long int structure_SkillEShock();
extern void structure_Set_SkillEShock(long long int val);
extern long long int structure_SkillIBoost();
extern void structure_Set_SkillIBoost(long long int val);
extern long long int structure_SkillLastChance();
extern void structure_Set_SkillLastChance(long long int val);
extern long long int structure_SkillSLayers();
extern void structure_Set_SkillSLayers(long long int val);

// --- wrapping struct: structure.EffectIBoost ---
//
extern long long int structure_EffectIBoost_CTor();
extern long long int structure_EffectIBoost_Desc(long long int _handle);
extern long long int structure_EffectIBoost_Clone(long long int _handle);
extern long long int structure_EffectIBoost_Amount(long long int _handle);
extern void structure_EffectIBoost_Increase(long long int _handle, char goRun);

// --- wrapping struct: structure.EffectLastChance ---
//
extern long long int structure_EffectLastChance_CTor();
extern long long int structure_EffectLastChance_Desc(long long int _handle);
extern long long int structure_EffectLastChance_Clone(long long int _handle);
extern void structure_EffectLastChance_OnTurnEnd(long long int _handle, long long int c, long long int opp, long long int turnState, char goRun);

// --- wrapping struct: structure.EffectSLayers ---
//
extern long long int structure_EffectSLayers_CTor();
extern long long int structure_EffectSLayers_Desc(long long int _handle);
extern long long int structure_EffectSLayers_Clone(long long int _handle);
extern long long int structure_EffectSLayers_Threshold(long long int _handle);
extern long long int structure_EffectSLayers_ModifyTakenDamage(long long int _handle, long long int dmg, long long int colour);
extern long long int structure_NewEffectIBoost(long long int amount);
extern long long int structure_NewEffectLastChance(long long int turnState);
extern long long int structure_NewEffectSLayers(long long int turnState, long long int threshold);

// ---- Global Variables: can only use functions to access ---
//
extern long long int z89_CharacterZ89();
extern void z89_Set_CharacterZ89(long long int val);
extern long long int z89_EffectDescUltimateSlow();
extern void z89_Set_EffectDescUltimateSlow(long long int val);
extern long long int z89_SkillDespondency();
extern void z89_Set_SkillDespondency(long long int val);
extern long long int z89_SkillGreenSphere();
extern void z89_Set_SkillGreenSphere(long long int val);
extern long long int z89_SkillIndifference();
extern void z89_Set_SkillIndifference(long long int val);
extern long long int z89_SkillScarcity();
extern void z89_Set_SkillScarcity(long long int val);

// --- wrapping struct: z89.EffectUltimateSlow ---
//
extern long long int z89_EffectUltimateSlow_CTor();
extern long long int z89_EffectUltimateSlow_Desc(long long int _handle);
extern long long int z89_EffectUltimateSlow_Clone(long long int _handle);
extern long long int z89_EffectUltimateSlow_Amount(long long int _handle);
extern void z89_EffectUltimateSlow_Increase(long long int _handle, char goRun);
extern long long int z89_EffectUltimateSlow_ModifySkillUnlockTurn(long long int _handle, long long int s, long long int unlockTurn);
extern long long int z89_NewEffectUltimateSlow();

// --- wrapping struct: common.Collectible ---
//
extern long long int common_Collectible_CTor();
extern long long int common_Collectible_Amount(long long int _handle);
extern void common_Collectible_Increase(long long int _handle, long long int amount, char goRun);
extern void common_Collectible_Decrease(long long int _handle, long long int amount, char goRun);
extern char common_Collectible_HasExpired(long long int _handle, long long int turnState);

// --- wrapping struct: common.DurationExpirable ---
//
extern long long int common_DurationExpirable_CTor();
extern long long int common_DurationExpirable_TurnsLeft(long long int _handle, long long int turnState);
extern char common_DurationExpirable_HasExpired(long long int _handle, long long int turnState);
extern long long int common_NewCollectible(long long int amount);
extern long long int common_NewDurationExpirable(long long int expCtx);

// ---- Global Variables: can only use functions to access ---
//
extern long long int gametest_EffectDescExpirable();
extern void gametest_Set_EffectDescExpirable(long long int val);

// --- wrapping struct: gametest.EffectExpirable ---
//
extern long long int gametest_EffectExpirable_CTor();
extern long long int gametest_EffectExpirable_Desc(long long int _handle);
extern long long int gametest_EffectExpirable_Clone(long long int _handle);
extern void gametest_EffectExpirable_Expire(long long int _handle, char goRun);
extern char gametest_EffectExpirable_HasExpired(long long int _handle, long long int turnState);
extern long long int gametest_NewEffectExpirable(char expired);

// --- wrapping slice: []game.TurnState ---
//
extern long long int Slice_game_TurnState_CTor();
extern GoInt Slice_game_TurnState_len(long long int handle);
extern long long int Slice_game_TurnState_elem(long long int handle, GoInt _idx);
extern long long int Slice_game_TurnState_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_game_TurnState_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_game_TurnState_append(long long int handle, long long int _vl);
extern long long int match_Player_RequestSkill(long long int _handle, long long int ctx);
extern char* match_Player_SendEnd(long long int _handle, long long int ctx);
extern char* match_Player_SendError(long long int _handle, long long int ctx, char* err);
extern char* match_Player_SendState(long long int _handle, long long int ctx, long long int state);

// --- wrapping struct: match.CharacterPlayer ---
//
extern long long int match_CharacterPlayer_CTor();
extern long long int match_CharacterPlayer_Character_Get(long long int handle);
extern void match_CharacterPlayer_Character_Set(long long int handle, long long int val);
extern long long int match_CharacterPlayer_Player_Get(long long int handle);
extern void match_CharacterPlayer_Player_Set(long long int handle, long long int val);

// --- wrapping struct: match.GameState ---
//
extern long long int match_GameState_CTor();
extern long long int match_GameState_Character_Get(long long int handle);
extern void match_GameState_Character_Set(long long int handle, long long int val);
extern long long int match_GameState_Opponent_Get(long long int handle);
extern void match_GameState_Opponent_Set(long long int handle, long long int val);
extern long long int match_GameState_TurnState_Get(long long int handle);
extern void match_GameState_TurnState_Set(long long int handle, long long int val);
extern long long int match_GameState_SkillsLeft_Get(long long int handle);
extern void match_GameState_SkillsLeft_Set(long long int handle, long long int val);
extern long long int match_GameState_SkillLog_Get(long long int handle);
extern void match_GameState_SkillLog_Set(long long int handle, long long int val);
extern char match_GameState_PlayerTurn_Get(long long int handle);
extern void match_GameState_PlayerTurn_Set(long long int handle, char val);
extern char match_GameState_AsOpp_Get(long long int handle);
extern void match_GameState_AsOpp_Set(long long int handle, char val);
extern char match_GameState_IsEnd(long long int _handle);
extern long long int match_GameState_Clone(long long int _handle);
extern long long int match_GameState_CloneWithSkill(long long int _handle, long long int i);

// --- wrapping struct: match.Match ---
//
extern long long int match_Match_CTor();
extern char* match_Match_Run(long long int _handle, long long int ctx);
extern long long int match_Match_Result(long long int _handle);

// --- wrapping map: match.SkillLog ---
//
extern long long int match_SkillLog_CTor();
extern GoInt match_SkillLog_len(long long int handle);
extern long long int match_SkillLog_elem(long long int handle, long long int _ky);
extern char match_SkillLog_contains(long long int handle, long long int _ky);
extern void match_SkillLog_set(long long int handle, long long int _ky, long long int _vl);
extern void match_SkillLog_delete(long long int handle, long long int _ky);
extern long long int match_SkillLog_keys(long long int handle);
extern long long int match_SkillLog_Clone(long long int _handle);
extern void match_SkillLog_Append(long long int _handle, long long int turn, long long int skill, char goRun);
extern long long int match_New(long long int p1, long long int p2, char invertedOrder);

// --- wrapping struct: bot.RevAdapter ---
//
extern long long int bot_RevAdapter_CTor();
extern long long int bot_RevAdapter_GetStateInit(long long int _handle);
extern long long int bot_RevAdapter_GetState(long long int _handle, long long int skill);
extern char* bot_RevAdapter_SendState(long long int _handle, long long int ctx, long long int state);
extern char* bot_RevAdapter_SendError(long long int _handle, long long int ctx, char* err);
extern char* bot_RevAdapter_SendEnd(long long int _handle, long long int ctx);
extern long long int bot_RevAdapter_RequestSkill(long long int _handle, long long int ctx);

// --- wrapping struct: bot.RandomBot ---
//
extern long long int bot_RandomBot_CTor();
extern char* bot_RandomBot_SendState(long long int _handle, long long int ctx, long long int state);
extern char* bot_RandomBot_SendError(long long int _handle, long long int ctx, char* err);
extern char* bot_RandomBot_SendEnd(long long int _handle, long long int ctx);
extern long long int bot_RandomBot_RequestSkill(long long int _handle, long long int ctx);
extern long long int bot_NewAdapter();

// --- wrapping slice: []minimax.Entry ---
//
extern long long int Slice_minimax_Entry_CTor();
extern GoInt Slice_minimax_Entry_len(long long int handle);
extern long long int Slice_minimax_Entry_elem(long long int handle, GoInt _idx);
extern long long int Slice_minimax_Entry_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_minimax_Entry_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_minimax_Entry_append(long long int handle, long long int _vl);

// ---- Global Variables: can only use functions to access ---
//
extern long long int minimax_MemOptConcurrentRunner();
extern void minimax_Set_MemOptConcurrentRunner(long long int val);
extern long long int minimax_SequentialRunner();
extern void minimax_Set_SequentialRunner(long long int val);
extern long long int minimax_TimeOptConcurrentRunner();
extern void minimax_Set_TimeOptConcurrentRunner(long long int val);

// --- wrapping struct: minimax.Bot ---
//
extern long long int minimax_Bot_CTor();
extern char* minimax_Bot_SendState(long long int _handle, long long int ctx, long long int state);
extern char* minimax_Bot_SendError(long long int _handle, long long int ctx, char* err);
extern char* minimax_Bot_SendEnd(long long int _handle, long long int ctx);
extern long long int minimax_Bot_RequestSkill(long long int _handle, long long int ctx);

// --- wrapping struct: minimax.Entry ---
//
extern long long int minimax_Entry_CTor();
extern long long int minimax_Entry_State_Get(long long int handle);
extern void minimax_Entry_State_Set(long long int handle, long long int val);
extern long long int minimax_Entry_Result_Get(long long int handle);
extern void minimax_Entry_Result_Set(long long int handle, long long int val);

// --- wrapping struct: minimax.Result ---
//
extern long long int minimax_Result_CTor();
extern long long int minimax_Result_Score_Get(long long int handle);
extern void minimax_Result_Score_Set(long long int handle, long long int val);
extern long long int minimax_Result_Strategy_Get(long long int handle);
extern void minimax_Result_Strategy_Set(long long int handle, long long int val);
extern long long int minimax_Result_Entries_Get(long long int handle);
extern void minimax_Result_Entries_Set(long long int handle, long long int val);

// --- wrapping struct: minimax.Runner ---
//
extern long long int minimax_Runner_CTor();
extern long long int minimax_Runner_MinConcDepth_Get(long long int handle);
extern void minimax_Runner_MinConcDepth_Set(long long int handle, long long int val);
extern long long int minimax_Runner_MaxConcDepth_Get(long long int handle);
extern void minimax_Runner_MaxConcDepth_Set(long long int handle, long long int val);
extern long long int minimax_Runner_MiniMax(long long int _handle, long long int ctx, long long int state, long long int depth);
extern long long int minimax_NewBot(long long int runner, long long int depth);

// --- wrapping map: map[string]any ---
//
extern long long int Map_string_any_CTor();
extern GoInt Map_string_any_len(long long int handle);
extern long long int Map_string_any_elem(long long int handle, char* _ky);
extern char Map_string_any_contains(long long int handle, char* _ky);
extern void Map_string_any_set(long long int handle, char* _ky, long long int _vl);
extern void Map_string_any_delete(long long int handle, char* _ky);
extern long long int Map_string_any_keys(long long int handle);
extern long long int ml_Format_Row(long long int _handle, long long int state);
extern char* ml_ExportDataset(long long int out, long long int data, long long int format);

// --- wrapping struct: formats.FullStateFormat ---
//
extern long long int formats_FullStateFormat_CTor();
extern long long int formats_FullStateFormat_Row(long long int _handle, long long int state);

// --- wrapping struct: formats.PrevMovesFormat ---
//
extern long long int formats_PrevMovesFormat_CTor();
extern long long int formats_PrevMovesFormat_Row(long long int _handle, long long int state);
extern long long int formats_GetMapState(long long int myin);
extern void formats_UpdateMapChar(long long int c, long long int opp, long long int turnState, long long int m, char* prefix, char goRun);
extern void formats_UpdateMapDefence(long long int mydef, long long int m, char* prefix, char goRun);
extern void formats_UpdateMapEffects(long long int c, long long int turnState, long long int m, char* prefix, char goRun);
extern void formats_UpdateMapSkill(long long int s, long long int c, long long int opp, long long int turnState, long long int m, char* prefix, char goRun);
extern char* context_Context_Err(long long int _handle);
extern long long int context_Context_Value(long long int _handle, long long int key);
extern long long int context_WithoutCancel(long long int parent);
extern long long int context_Background();
extern char* context_Cause(long long int c);
extern long long int context_TODO();
extern long long int context_WithValue(long long int parent, long long int key, long long int val);

// --- wrapping slice: [2]uintptr ---
//
extern long long int Array_2_uintptr_CTor();
extern GoInt Array_2_uintptr_len(long long int handle);
extern long long unsigned int Array_2_uintptr_elem(long long int handle, GoInt _idx);
extern void Array_2_uintptr_set(long long int handle, GoInt _idx, long long unsigned int _vl);

// --- wrapping slice: []reflect.Value ---
//
extern long long int Slice_reflect_Value_CTor();
extern GoInt Slice_reflect_Value_len(long long int handle);
extern long long int Slice_reflect_Value_elem(long long int handle, GoInt _idx);
extern long long int Slice_reflect_Value_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void Slice_reflect_Value_set(long long int handle, GoInt _idx, long long int _vl);
extern void Slice_reflect_Value_append(long long int handle, long long int _vl);
extern long long int json_Marshaler_MarshalJSON(long long int _handle);
extern char* json_Unmarshaler_UnmarshalJSON(long long int _handle, long long int arg_0);

// --- wrapping struct: json.InvalidUTF8Error ---
//
extern long long int json_InvalidUTF8Error_CTor();
extern char* json_InvalidUTF8Error_S_Get(long long int handle);
extern void json_InvalidUTF8Error_S_Set(long long int handle, char* val);
extern char* json_InvalidUTF8Error_Error(long long int _handle);

// --- wrapping struct: json.MarshalerError ---
//
extern long long int json_MarshalerError_CTor();
extern long long int json_MarshalerError_Type_Get(long long int handle);
extern void json_MarshalerError_Type_Set(long long int handle, long long int val);
extern char* json_MarshalerError_Error(long long int _handle);
extern char* json_MarshalerError_Unwrap(long long int _handle);

// --- wrapping struct: json.SyntaxError ---
//
extern long long int json_SyntaxError_CTor();
extern long long int json_SyntaxError_Offset_Get(long long int handle);
extern void json_SyntaxError_Offset_Set(long long int handle, long long int val);
extern char* json_SyntaxError_Error(long long int _handle);

// --- wrapping struct: json.UnsupportedTypeError ---
//
extern long long int json_UnsupportedTypeError_CTor();
extern long long int json_UnsupportedTypeError_Type_Get(long long int handle);
extern void json_UnsupportedTypeError_Type_Set(long long int handle, long long int val);
extern char* json_UnsupportedTypeError_Error(long long int _handle);

// --- wrapping struct: json.UnsupportedValueError ---
//
extern long long int json_UnsupportedValueError_CTor();
extern long long int json_UnsupportedValueError_Value_Get(long long int handle);
extern void json_UnsupportedValueError_Value_Set(long long int handle, long long int val);
extern char* json_UnsupportedValueError_Str_Get(long long int handle);
extern void json_UnsupportedValueError_Str_Set(long long int handle, char* val);
extern char* json_UnsupportedValueError_Error(long long int _handle);

// --- wrapping struct: json.Decoder ---
//
extern long long int json_Decoder_CTor();
extern void json_Decoder_UseNumber(long long int _handle, char goRun);
extern void json_Decoder_DisallowUnknownFields(long long int _handle, char goRun);
extern char* json_Decoder_Decode(long long int _handle, long long int v);
extern long long int json_Decoder_Buffered(long long int _handle);
extern long long int json_Decoder_Token(long long int _handle);
extern char json_Decoder_More(long long int _handle);
extern long long int json_Decoder_InputOffset(long long int _handle);

// --- wrapping struct: json.Encoder ---
//
extern long long int json_Encoder_CTor();
extern char* json_Encoder_Encode(long long int _handle, long long int v);
extern void json_Encoder_SetIndent(long long int _handle, char* prefix, char* indent, char goRun);
extern void json_Encoder_SetEscapeHTML(long long int _handle, char on, char goRun);

// --- wrapping struct: json.UnmarshalTypeError ---
//
extern long long int json_UnmarshalTypeError_CTor();
extern char* json_UnmarshalTypeError_Value_Get(long long int handle);
extern void json_UnmarshalTypeError_Value_Set(long long int handle, char* val);
extern long long int json_UnmarshalTypeError_Type_Get(long long int handle);
extern void json_UnmarshalTypeError_Type_Set(long long int handle, long long int val);
extern long long int json_UnmarshalTypeError_Offset_Get(long long int handle);
extern void json_UnmarshalTypeError_Offset_Set(long long int handle, long long int val);
extern char* json_UnmarshalTypeError_Struct_Get(long long int handle);
extern void json_UnmarshalTypeError_Struct_Set(long long int handle, char* val);
extern char* json_UnmarshalTypeError_Field_Get(long long int handle);
extern void json_UnmarshalTypeError_Field_Set(long long int handle, char* val);
extern char* json_UnmarshalTypeError_Error(long long int _handle);

// --- wrapping struct: json.InvalidUnmarshalError ---
//
extern long long int json_InvalidUnmarshalError_CTor();
extern long long int json_InvalidUnmarshalError_Type_Get(long long int handle);
extern void json_InvalidUnmarshalError_Type_Set(long long int handle, long long int val);
extern char* json_InvalidUnmarshalError_Error(long long int _handle);

// --- wrapping struct: json.UnmarshalFieldError ---
//
extern long long int json_UnmarshalFieldError_CTor();
extern char* json_UnmarshalFieldError_Key_Get(long long int handle);
extern void json_UnmarshalFieldError_Key_Set(long long int handle, char* val);
extern long long int json_UnmarshalFieldError_Type_Get(long long int handle);
extern void json_UnmarshalFieldError_Type_Set(long long int handle, long long int val);
extern long long int json_UnmarshalFieldError_Field_Get(long long int handle);
extern void json_UnmarshalFieldError_Field_Set(long long int handle, long long int val);
extern char* json_UnmarshalFieldError_Error(long long int _handle);

// --- wrapping slice: json.RawMessage ---
//
extern long long int json_RawMessage_CTor();
extern GoInt json_RawMessage_len(long long int handle);
extern char json_RawMessage_elem(long long int handle, GoInt _idx);
extern long long int json_RawMessage_subslice(long long int handle, GoInt _st, GoInt _ed);
extern void json_RawMessage_set(long long int handle, GoInt _idx, char _vl);
extern void json_RawMessage_append(long long int handle, char _vl);
extern long long int json_RawMessage_MarshalJSON(long long int _handle);
extern char* json_RawMessage_UnmarshalJSON(long long int _handle, long long int data);
extern long long int json_NewDecoder(long long int r);
extern long long int json_NewEncoder(long long int w);
extern char json_Valid(long long int data);
extern char* json_Compact(long long int dst, long long int src);
extern long long int json_MarshalIndent(long long int v, char* prefix, char* indent);
extern long long int json_Marshal(long long int v);
extern char* json_Unmarshal(long long int data, long long int v);
extern void json_HTMLEscape(long long int dst, long long int src, char goRun);
extern char* json_Indent(long long int dst, long long int src, char* prefix, char* indent);

#ifdef __cplusplus
}
#endif
