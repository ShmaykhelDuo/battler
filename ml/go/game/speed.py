
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/game/characters/speed within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import speed
# and then refer to everything using speed. prefix
# packages imported by this package listed below:

from . import common
from . import game



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
SkillRunIndex = 0
SkillSpeedIndex = 2
SkillStabIndex = 3
SkillWeakenIndex = 1


# ---- Global Variables: can only use functions to access ---
def CharacterSpeed():
	"""
	CharacterSpeed Gets Go Variable: speed.CharacterSpeed
	
	"""
	return game.CharacterData(handle=_game.speed_CharacterSpeed())

def Set_CharacterSpeed(value):
	"""
	Set_CharacterSpeed Sets Go Variable: speed.CharacterSpeed
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_CharacterSpeed(value.handle)
	else:
		_game.speed_Set_CharacterSpeed(value)

def EffectDescBlackTokens():
	"""
	EffectDescBlackTokens Gets Go Variable: speed.EffectDescBlackTokens
	
	"""
	return game.EffectDescription(handle=_game.speed_EffectDescBlackTokens())

def Set_EffectDescBlackTokens(value):
	"""
	Set_EffectDescBlackTokens Sets Go Variable: speed.EffectDescBlackTokens
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_EffectDescBlackTokens(value.handle)
	else:
		_game.speed_Set_EffectDescBlackTokens(value)

def EffectDescDamageReduced():
	"""
	EffectDescDamageReduced Gets Go Variable: speed.EffectDescDamageReduced
	
	"""
	return game.EffectDescription(handle=_game.speed_EffectDescDamageReduced())

def Set_EffectDescDamageReduced(value):
	"""
	Set_EffectDescDamageReduced Sets Go Variable: speed.EffectDescDamageReduced
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_EffectDescDamageReduced(value.handle)
	else:
		_game.speed_Set_EffectDescDamageReduced(value)

def EffectDescDefenceReduced():
	"""
	EffectDescDefenceReduced Gets Go Variable: speed.EffectDescDefenceReduced
	
	"""
	return game.EffectDescription(handle=_game.speed_EffectDescDefenceReduced())

def Set_EffectDescDefenceReduced(value):
	"""
	Set_EffectDescDefenceReduced Sets Go Variable: speed.EffectDescDefenceReduced
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_EffectDescDefenceReduced(value.handle)
	else:
		_game.speed_Set_EffectDescDefenceReduced(value)

def EffectDescGreenTokens():
	"""
	EffectDescGreenTokens Gets Go Variable: speed.EffectDescGreenTokens
	
	"""
	return game.EffectDescription(handle=_game.speed_EffectDescGreenTokens())

def Set_EffectDescGreenTokens(value):
	"""
	Set_EffectDescGreenTokens Sets Go Variable: speed.EffectDescGreenTokens
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_EffectDescGreenTokens(value.handle)
	else:
		_game.speed_Set_EffectDescGreenTokens(value)

def EffectDescSpedUp():
	"""
	EffectDescSpedUp Gets Go Variable: speed.EffectDescSpedUp
	
	"""
	return game.EffectDescription(handle=_game.speed_EffectDescSpedUp())

def Set_EffectDescSpedUp(value):
	"""
	Set_EffectDescSpedUp Sets Go Variable: speed.EffectDescSpedUp
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_EffectDescSpedUp(value.handle)
	else:
		_game.speed_Set_EffectDescSpedUp(value)

def SkillRun():
	"""
	SkillRun Gets Go Variable: speed.SkillRun
	Your opponent's next attack will deal 5 less damage. Gain a Green Token.
	
	"""
	return game.SkillData(handle=_game.speed_SkillRun())

def Set_SkillRun(value):
	"""
	Set_SkillRun Sets Go Variable: speed.SkillRun
	Your opponent's next attack will deal 5 less damage. Gain a Green Token.
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_SkillRun(value.handle)
	else:
		_game.speed_Set_SkillRun(value)

def SkillSpeed():
	"""
	SkillSpeed Gets Go Variable: speed.SkillSpeed
	Next turn, you'll use two skills but not your ultimate. Gain a Green Token.
	
	"""
	return game.SkillData(handle=_game.speed_SkillSpeed())

def Set_SkillSpeed(value):
	"""
	Set_SkillSpeed Sets Go Variable: speed.SkillSpeed
	Next turn, you'll use two skills but not your ultimate. Gain a Green Token.
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_SkillSpeed(value.handle)
	else:
		_game.speed_Set_SkillSpeed(value)

def SkillStab():
	"""
	SkillStab Gets Go Variable: speed.SkillStab
	For each of your tokens, deal 6 Green&Black damage.
	
	"""
	return game.SkillData(handle=_game.speed_SkillStab())

def Set_SkillStab(value):
	"""
	Set_SkillStab Sets Go Variable: speed.SkillStab
	For each of your tokens, deal 6 Green&Black damage.
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_SkillStab(value.handle)
	else:
		_game.speed_Set_SkillStab(value)

def SkillWeaken():
	"""
	SkillWeaken Gets Go Variable: speed.SkillWeaken
	Reduce your opponent's defense to Green by 1. Gain a Black Token.
	
	"""
	return game.SkillData(handle=_game.speed_SkillWeaken())

def Set_SkillWeaken(value):
	"""
	Set_SkillWeaken Sets Go Variable: speed.SkillWeaken
	Reduce your opponent's defense to Green by 1. Gain a Black Token.
	
	"""
	if isinstance(value, go.GoClass):
		_game.speed_Set_SkillWeaken(value.handle)
	else:
		_game.speed_Set_SkillWeaken(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct speed.EffectBlackTokens
class EffectBlackTokens(common.Collectible):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.speed_EffectBlackTokens_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectBlackTokens{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectBlackTokens ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.speed_EffectBlackTokens_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.speed_EffectBlackTokens_Clone(self.handle))

# Python type for struct speed.EffectDamageReduced
class EffectDamageReduced(go.GoClass):
	"""Your opponent's next attack will deal this much less damage.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.speed_EffectDamageReduced_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectDamageReduced{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectDamageReduced ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.speed_EffectDamageReduced_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.speed_EffectDamageReduced_Clone(self.handle))
	def Amount(self):
		"""Amount() int"""
		return _game.speed_EffectDamageReduced_Amount(self.handle)
	def Increase(self, amount, goRun=False):
		"""Increase(int amount) """
		_game.speed_EffectDamageReduced_Increase(self.handle, amount, goRun)
	def ModifyTakenDamage(self, dmg, colour):
		"""ModifyTakenDamage(int dmg, int colour) int
		
		ModifyTakenDamage returns the modified amount of damage based on provided amount of damage and damage colour.
		"""
		return _game.speed_EffectDamageReduced_ModifyTakenDamage(self.handle, dmg, colour)
	def HasExpired(self, turnState):
		"""HasExpired(object turnState) bool
		
		HasExpired reports whether the effect has expired.
		"""
		return _game.speed_EffectDamageReduced_HasExpired(self.handle, turnState.handle)

# Python type for struct speed.EffectDefenceReduced
class EffectDefenceReduced(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.speed_EffectDefenceReduced_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectDefenceReduced{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectDefenceReduced ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.speed_EffectDefenceReduced_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.speed_EffectDefenceReduced_Clone(self.handle))
	def ModifyDefences(self, mydef, goRun=False):
		"""ModifyDefences(object def) 
		
		ModifyDefences returns the modified defences.
		"""
		_game.speed_EffectDefenceReduced_ModifyDefences(self.handle, mydef.handle, goRun)

# Python type for struct speed.EffectGreenTokens
class EffectGreenTokens(common.Collectible):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.speed_EffectGreenTokens_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectGreenTokens{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectGreenTokens ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.speed_EffectGreenTokens_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.speed_EffectGreenTokens_Clone(self.handle))

# Python type for struct speed.EffectSpedUp
class EffectSpedUp(common.DurationExpirable):
	"""This turn, you can use two skills but not your ultimate.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.speed_EffectSpedUp_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectSpedUp{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'speed.EffectSpedUp ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.speed_EffectSpedUp_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.speed_EffectSpedUp_Clone(self.handle))
	def SkillsPerTurn(self):
		"""SkillsPerTurn() int
		
		SkillsPerTurn returns a number of tines available for the character to use skills this turn.
		"""
		return _game.speed_EffectSpedUp_SkillsPerTurn(self.handle)
	def IsSkillAvailable(self, s):
		"""IsSkillAvailable(object s) bool
		
		IsSkillAvailable reports whether the skill can be used.
		"""
		return _game.speed_EffectSpedUp_IsSkillAvailable(self.handle, s.handle)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewEffectBlackTokens(number):
	"""NewEffectBlackTokens(int number) object"""
	return EffectBlackTokens(handle=_game.speed_NewEffectBlackTokens(number))
def NewEffectDamageReduced(amount):
	"""NewEffectDamageReduced(int amount) object"""
	return EffectDamageReduced(handle=_game.speed_NewEffectDamageReduced(amount))
def NewEffectGreenTokens(number):
	"""NewEffectGreenTokens(int number) object"""
	return EffectGreenTokens(handle=_game.speed_NewEffectGreenTokens(number))
def NewEffectSpedUp(turnState):
	"""NewEffectSpedUp(object turnState) object"""
	return EffectSpedUp(handle=_game.speed_NewEffectSpedUp(turnState.handle))


# ---- Functions ---


