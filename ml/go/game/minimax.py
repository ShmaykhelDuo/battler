
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/bot/minimax within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import minimax
# and then refer to everything using minimax. prefix
# packages imported by this package listed below:

from . import context
from . import match
from . import game



# ---- Types ---

# Python type for slice []minimax.Entry
class Slice_minimax_Entry(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameter is a python list that we copy from
		"""
		self.index = 0
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.Slice_minimax_Entry_CTor()
			_game.IncRef(self.handle)
			if len(args) > 0:
				if not isinstance(args[0], _collections_abc.Iterable):
					raise TypeError('Slice_minimax_Entry.__init__ takes a sequence as argument')
				for elt in args[0]:
					self.append(elt)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		s = 'minimax.Slice_minimax_Entry len: ' + str(len(self)) + ' handle: ' + str(self.handle) + ' ['
		if len(self) < 120:
			s += ', '.join(map(str, self)) + ']'
		return s
	def __repr__(self):
		return 'minimax.Slice_minimax_Entry([' + ', '.join(map(str, self)) + '])'
	def __len__(self):
		return _game.Slice_minimax_Entry_len(self.handle)
	def __getitem__(self, key):
		if isinstance(key, slice):
			if key.step == None or key.step == 1:
				st = key.start
				ed = key.stop
				if st == None:
					st = 0
				if ed == None:
					ed = _game.Slice_minimax_Entry_len(self.handle)
				return Slice_minimax_Entry(handle=_game.Slice_minimax_Entry_subslice(self.handle, st, ed))
			return [self[ii] for ii in range(*key.indices(len(self)))]
		elif isinstance(key, int):
			if key < 0:
				key += len(self)
			if key < 0 or key >= len(self):
				raise IndexError('slice index out of range')
			return Entry(handle=_game.Slice_minimax_Entry_elem(self.handle, key))
		else:
			raise TypeError('slice index invalid type')
	def __setitem__(self, idx, value):
		if idx < 0:
			idx += len(self)
		if idx < len(self):
			_game.Slice_minimax_Entry_set(self.handle, idx, value.handle)
			return
		raise IndexError('slice index out of range')
	def __iadd__(self, value):
		if not isinstance(value, _collections_abc.Iterable):
			raise TypeError('Slice_minimax_Entry.__iadd__ takes a sequence as argument')
		for elt in value:
			self.append(elt)
		return self
	def __iter__(self):
		self.index = 0
		return self
	def __next__(self):
		if self.index < len(self):
			rv = Entry(handle=_game.Slice_minimax_Entry_elem(self.handle, self.index))
			self.index = self.index + 1
			return rv
		raise StopIteration
	def append(self, value):
		_game.Slice_minimax_Entry_append(self.handle, value.handle)
	def copy(self, src):
		""" copy emulates the go copy function, copying elements into this list from source list, up to min of size of each list """
		mx = min(len(self), len(src))
		for i in range(mx):
			self[i] = src[i]


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---
def MemOptConcurrentRunner():
	"""
	MemOptConcurrentRunner Gets Go Variable: minimax.MemOptConcurrentRunner
	MemOptConcurrentRunner is a [Runner] configured to be run concurrently with the minimum viable peak memory usage.
	
	"""
	return Runner(handle=_game.minimax_MemOptConcurrentRunner())

def Set_MemOptConcurrentRunner(value):
	"""
	Set_MemOptConcurrentRunner Sets Go Variable: minimax.MemOptConcurrentRunner
	MemOptConcurrentRunner is a [Runner] configured to be run concurrently with the minimum viable peak memory usage.
	
	"""
	if isinstance(value, go.GoClass):
		_game.minimax_Set_MemOptConcurrentRunner(value.handle)
	else:
		_game.minimax_Set_MemOptConcurrentRunner(value)

def SequentialRunner():
	"""
	SequentialRunner Gets Go Variable: minimax.SequentialRunner
	SequentialRunner is a [Runner] configured to be run in a parent goroutine.
	
	"""
	return Runner(handle=_game.minimax_SequentialRunner())

def Set_SequentialRunner(value):
	"""
	Set_SequentialRunner Sets Go Variable: minimax.SequentialRunner
	SequentialRunner is a [Runner] configured to be run in a parent goroutine.
	
	"""
	if isinstance(value, go.GoClass):
		_game.minimax_Set_SequentialRunner(value.handle)
	else:
		_game.minimax_Set_SequentialRunner(value)

def TimeOptConcurrentRunner():
	"""
	TimeOptConcurrentRunner Gets Go Variable: minimax.TimeOptConcurrentRunner
	TimeOptConcurrentRunner is a [Runner] configured to be run concurrently in the minimum time.
	
	"""
	return Runner(handle=_game.minimax_TimeOptConcurrentRunner())

def Set_TimeOptConcurrentRunner(value):
	"""
	Set_TimeOptConcurrentRunner Sets Go Variable: minimax.TimeOptConcurrentRunner
	TimeOptConcurrentRunner is a [Runner] configured to be run concurrently in the minimum time.
	
	"""
	if isinstance(value, go.GoClass):
		_game.minimax_Set_TimeOptConcurrentRunner(value.handle)
	else:
		_game.minimax_Set_TimeOptConcurrentRunner(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct minimax.Bot
class Bot(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.minimax_Bot_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Bot{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Bot ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def SendState(self, ctx, state):
		"""SendState(object ctx, object state) str"""
		return _game.minimax_Bot_SendState(self.handle, ctx.handle, state.handle)
	def SendError(self, ctx, err):
		"""SendError(object ctx, str err) str"""
		return _game.minimax_Bot_SendError(self.handle, ctx.handle, err)
	def SendEnd(self, ctx):
		"""SendEnd(object ctx) str"""
		return _game.minimax_Bot_SendEnd(self.handle, ctx.handle)
	def RequestSkill(self, ctx):
		"""RequestSkill(object ctx) int, str"""
		return _game.minimax_Bot_RequestSkill(self.handle, ctx.handle)

# Python type for struct minimax.Entry
class Entry(go.GoClass):
	"""Entry is an entry used for further analysis.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.minimax_Entry_CTor()
			_game.IncRef(self.handle)
			if  0 < len(args):
				self.State = args[0]
			if "State" in kwargs:
				self.State = kwargs["State"]
			if  1 < len(args):
				self.Result = args[1]
			if "Result" in kwargs:
				self.Result = kwargs["Result"]
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Entry{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Entry ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def State(self):
		return match.GameState(handle=_game.minimax_Entry_State_Get(self.handle))
	@State.setter
	def State(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Entry_State_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Result(self):
		return match.SkillLog(handle=_game.minimax_Entry_Result_Get(self.handle))
	@Result.setter
	def Result(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Entry_Result_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct minimax.Result
class Result(go.GoClass):
	"""Result is a result of minimax.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.minimax_Result_CTor()
			_game.IncRef(self.handle)
			if  0 < len(args):
				self.Score = args[0]
			if "Score" in kwargs:
				self.Score = kwargs["Score"]
			if  1 < len(args):
				self.Strategy = args[1]
			if "Strategy" in kwargs:
				self.Strategy = kwargs["Strategy"]
			if  2 < len(args):
				self.Entries = args[2]
			if "Entries" in kwargs:
				self.Entries = kwargs["Entries"]
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Result{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Result ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def Score(self):
		return _game.minimax_Result_Score_Get(self.handle)
	@Score.setter
	def Score(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Result_Score_Set(self.handle, value.handle)
		else:
			_game.minimax_Result_Score_Set(self.handle, value)
	@property
	def Strategy(self):
		return match.SkillLog(handle=_game.minimax_Result_Strategy_Get(self.handle))
	@Strategy.setter
	def Strategy(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Result_Strategy_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def Entries(self):
		return Slice_minimax_Entry(handle=_game.minimax_Result_Entries_Get(self.handle))
	@Entries.setter
	def Entries(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Result_Entries_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))

# Python type for struct minimax.Runner
class Runner(go.GoClass):
	"""Runner contains configuration required to run minimax.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.minimax_Runner_CTor()
			_game.IncRef(self.handle)
			if  0 < len(args):
				self.MinConcDepth = args[0]
			if "MinConcDepth" in kwargs:
				self.MinConcDepth = kwargs["MinConcDepth"]
			if  1 < len(args):
				self.MaxConcDepth = args[1]
			if "MaxConcDepth" in kwargs:
				self.MaxConcDepth = kwargs["MaxConcDepth"]
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Runner{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'minimax.Runner ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def MinConcDepth(self):
		return _game.minimax_Runner_MinConcDepth_Get(self.handle)
	@MinConcDepth.setter
	def MinConcDepth(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Runner_MinConcDepth_Set(self.handle, value.handle)
		else:
			_game.minimax_Runner_MinConcDepth_Set(self.handle, value)
	@property
	def MaxConcDepth(self):
		return _game.minimax_Runner_MaxConcDepth_Get(self.handle)
	@MaxConcDepth.setter
	def MaxConcDepth(self, value):
		if isinstance(value, go.GoClass):
			_game.minimax_Runner_MaxConcDepth_Set(self.handle, value.handle)
		else:
			_game.minimax_Runner_MaxConcDepth_Set(self.handle, value)
	def MiniMax(self, ctx, state, depth):
		"""MiniMax(object ctx, object state, int depth) object, str
		
		MiniMax computes the most optimal strategy within number of turns equal to depth.
		"""
		return Result(handle=_game.minimax_Runner_MiniMax(self.handle, ctx.handle, state.handle, depth))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewBot(runner, depth):
	"""NewBot(object runner, int depth) object"""
	return Bot(handle=_game.minimax_NewBot(runner.handle, depth))


# ---- Functions ---


