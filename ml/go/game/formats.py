
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/bot/ml/formats within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import formats
# and then refer to everything using formats. prefix
# packages imported by this package listed below:

from . import milana
from . import speed
from . import storyteller
from . import z89
from . import match
from . import game
from . import euphoria
from . import ruby
from . import structure
from . import ml



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---

# Python type for struct formats.FullStateFormat
class FullStateFormat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.formats_FullStateFormat_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'formats.FullStateFormat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'formats.FullStateFormat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Row(self, state):
		"""Row(object state) object"""
		return ml.Map_string_any(handle=_game.formats_FullStateFormat_Row(self.handle, state.handle))

# Python type for struct formats.PrevMovesFormat
class PrevMovesFormat(go.GoClass):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.formats_PrevMovesFormat_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'formats.PrevMovesFormat{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'formats.PrevMovesFormat ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Row(self, state):
		"""Row(object state) object"""
		return ml.Map_string_any(handle=_game.formats_PrevMovesFormat_Row(self.handle, state.handle))


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def GetMapState(myin):
	"""GetMapState(object in) object"""
	return ml.Map_string_any(handle=_game.formats_GetMapState(myin.handle))
def UpdateMapChar(c, opp, turnState, m, prefix, goRun=False):
	"""UpdateMapChar(object c, object opp, object turnState, object m, str prefix) """
	_game.formats_UpdateMapChar(c.handle, opp.handle, turnState.handle, m.handle, prefix, goRun)
def UpdateMapDefence(mydef, m, prefix, goRun=False):
	"""UpdateMapDefence(object def, object m, str prefix) """
	_game.formats_UpdateMapDefence(mydef.handle, m.handle, prefix, goRun)
def UpdateMapEffects(c, turnState, m, prefix, goRun=False):
	"""UpdateMapEffects(object c, object turnState, object m, str prefix) """
	_game.formats_UpdateMapEffects(c.handle, turnState.handle, m.handle, prefix, goRun)
def UpdateMapSkill(s, c, opp, turnState, m, prefix, goRun=False):
	"""UpdateMapSkill(object s, object c, object opp, object turnState, object m, str prefix) """
	_game.formats_UpdateMapSkill(s.handle, c.handle, opp.handle, turnState.handle, m.handle, prefix, goRun)


