
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/game/characters/structure within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import structure
# and then refer to everything using structure. prefix
# packages imported by this package listed below:

from . import game
from . import common



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
SkillEShockIndex = 0
SkillIBoostIndex = 1
SkillLastChanceIndex = 3
SkillSLayersIndex = 2


# ---- Global Variables: can only use functions to access ---
def CharacterStructure():
	"""
	CharacterStructure Gets Go Variable: structure.CharacterStructure
	
	"""
	return game.CharacterData(handle=_game.structure_CharacterStructure())

def Set_CharacterStructure(value):
	"""
	Set_CharacterStructure Sets Go Variable: structure.CharacterStructure
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_CharacterStructure(value.handle)
	else:
		_game.structure_Set_CharacterStructure(value)

def EffectDescIBoost():
	"""
	EffectDescIBoost Gets Go Variable: structure.EffectDescIBoost
	
	"""
	return game.EffectDescription(handle=_game.structure_EffectDescIBoost())

def Set_EffectDescIBoost(value):
	"""
	Set_EffectDescIBoost Sets Go Variable: structure.EffectDescIBoost
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_EffectDescIBoost(value.handle)
	else:
		_game.structure_Set_EffectDescIBoost(value)

def EffectDescLastChance():
	"""
	EffectDescLastChance Gets Go Variable: structure.EffectDescLastChance
	
	"""
	return game.EffectDescription(handle=_game.structure_EffectDescLastChance())

def Set_EffectDescLastChance(value):
	"""
	Set_EffectDescLastChance Sets Go Variable: structure.EffectDescLastChance
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_EffectDescLastChance(value.handle)
	else:
		_game.structure_Set_EffectDescLastChance(value)

def EffectDescSLayers():
	"""
	EffectDescSLayers Gets Go Variable: structure.EffectDescSLayers
	
	"""
	return game.EffectDescription(handle=_game.structure_EffectDescSLayers())

def Set_EffectDescSLayers(value):
	"""
	Set_EffectDescSLayers Sets Go Variable: structure.EffectDescSLayers
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_EffectDescSLayers(value.handle)
	else:
		_game.structure_Set_EffectDescSLayers(value)

def SkillEShock():
	"""
	SkillEShock Gets Go Variable: structure.SkillEShock
	Deal Cyan damage. Base damage is 5, gets to 10, 15 and 20 when boosted by I Boost.
	
	"""
	return game.SkillData(handle=_game.structure_SkillEShock())

def Set_SkillEShock(value):
	"""
	Set_SkillEShock Sets Go Variable: structure.SkillEShock
	Deal Cyan damage. Base damage is 5, gets to 10, 15 and 20 when boosted by I Boost.
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_SkillEShock(value.handle)
	else:
		_game.structure_Set_SkillEShock(value)

def SkillIBoost():
	"""
	SkillIBoost Gets Go Variable: structure.SkillIBoost
	Boost your S Layers threshold by 5 and E-Shock damage by 5.
	Can only be used three times in a match.
	
	"""
	return game.SkillData(handle=_game.structure_SkillIBoost())

def Set_SkillIBoost(value):
	"""
	Set_SkillIBoost Sets Go Variable: structure.SkillIBoost
	Boost your S Layers threshold by 5 and E-Shock damage by 5.
	Can only be used three times in a match.
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_SkillIBoost(value.handle)
	else:
		_game.structure_Set_SkillIBoost(value)

def SkillLastChance():
	"""
	SkillLastChance Gets Go Variable: structure.SkillLastChance
	If you survive your opponent's next turn, fully heal.
	Unlocks on turn 7.
	Can only be used once per match.
	
	"""
	return game.SkillData(handle=_game.structure_SkillLastChance())

def Set_SkillLastChance(value):
	"""
	Set_SkillLastChance Sets Go Variable: structure.SkillLastChance
	If you survive your opponent's next turn, fully heal.
	Unlocks on turn 7.
	Can only be used once per match.
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_SkillLastChance(value.handle)
	else:
		_game.structure_Set_SkillLastChance(value)

def SkillSLayers():
	"""
	SkillSLayers Gets Go Variable: structure.SkillSLayers
	Next turn, your opponent can't damage you unless they deal more than a certain threshold.
	Thresholds are 5, 10, 15 and 20.
	Gain 1 Defense against all colours but Black.
	
	"""
	return game.SkillData(handle=_game.structure_SkillSLayers())

def Set_SkillSLayers(value):
	"""
	Set_SkillSLayers Sets Go Variable: structure.SkillSLayers
	Next turn, your opponent can't damage you unless they deal more than a certain threshold.
	Thresholds are 5, 10, 15 and 20.
	Gain 1 Defense against all colours but Black.
	
	"""
	if isinstance(value, go.GoClass):
		_game.structure_Set_SkillSLayers(value.handle)
	else:
		_game.structure_Set_SkillSLayers(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct structure.EffectIBoost
class EffectIBoost(go.GoClass):
	"""Boosts your Electric Shock damage and Layers defense.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.structure_EffectIBoost_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'structure.EffectIBoost{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'structure.EffectIBoost ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.structure_EffectIBoost_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.structure_EffectIBoost_Clone(self.handle))
	def Amount(self):
		"""Amount() int"""
		return _game.structure_EffectIBoost_Amount(self.handle)
	def Increase(self, goRun=False):
		"""Increase() """
		_game.structure_EffectIBoost_Increase(self.handle, goRun)

# Python type for struct structure.EffectLastChance
class EffectLastChance(common.DurationExpirable):
	"""If you survive your opponent's next turn, fully heals you.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.structure_EffectLastChance_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'structure.EffectLastChance{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'structure.EffectLastChance ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.structure_EffectLastChance_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.structure_EffectLastChance_Clone(self.handle))
	def OnTurnEnd(self, c, opp, turnState, goRun=False):
		"""OnTurnEnd(object c, object opp, object turnState) 
		
		OnTurnEnd executes the end-of-turn action.
		"""
		_game.structure_EffectLastChance_OnTurnEnd(self.handle, c.handle, opp.handle, turnState.handle, goRun)

# Python type for struct structure.EffectSLayers
class EffectSLayers(common.DurationExpirable):
	""""""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.structure_EffectSLayers_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'structure.EffectSLayers{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'structure.EffectSLayers ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.structure_EffectSLayers_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.structure_EffectSLayers_Clone(self.handle))
	def Threshold(self):
		"""Threshold() int"""
		return _game.structure_EffectSLayers_Threshold(self.handle)
	def ModifyTakenDamage(self, dmg, colour):
		"""ModifyTakenDamage(int dmg, int colour) int
		
		ModifyTakenDamage returns the modified amount of damage based on provided amount of damage and damage colour.
		"""
		return _game.structure_EffectSLayers_ModifyTakenDamage(self.handle, dmg, colour)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewEffectIBoost(amount):
	"""NewEffectIBoost(int amount) object"""
	return EffectIBoost(handle=_game.structure_NewEffectIBoost(amount))
def NewEffectLastChance(turnState):
	"""NewEffectLastChance(object turnState) object"""
	return EffectLastChance(handle=_game.structure_NewEffectLastChance(turnState.handle))
def NewEffectSLayers(turnState, threshold):
	"""NewEffectSLayers(object turnState, int threshold) object"""
	return EffectSLayers(handle=_game.structure_NewEffectSLayers(turnState.handle, threshold))


# ---- Functions ---


