
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/game/characters/ruby within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import ruby
# and then refer to everything using ruby. prefix
# packages imported by this package listed below:

from . import game
from . import common



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
SkillDanceIndex = 0
SkillExecuteIndex = 3
SkillRageIndex = 1
SkillStopIndex = 2


# ---- Global Variables: can only use functions to access ---
def CharacterRuby():
	"""
	CharacterRuby Gets Go Variable: ruby.CharacterRuby
	
	"""
	return game.CharacterData(handle=_game.ruby_CharacterRuby())

def Set_CharacterRuby(value):
	"""
	Set_CharacterRuby Sets Go Variable: ruby.CharacterRuby
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_CharacterRuby(value.handle)
	else:
		_game.ruby_Set_CharacterRuby(value)

def EffectDescCannotHeal():
	"""
	EffectDescCannotHeal Gets Go Variable: ruby.EffectDescCannotHeal
	EffectDescCannotHeal is a description of [EffectCannotHeal]
	
	"""
	return game.EffectDescription(handle=_game.ruby_EffectDescCannotHeal())

def Set_EffectDescCannotHeal(value):
	"""
	Set_EffectDescCannotHeal Sets Go Variable: ruby.EffectDescCannotHeal
	EffectDescCannotHeal is a description of [EffectCannotHeal]
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_EffectDescCannotHeal(value.handle)
	else:
		_game.ruby_Set_EffectDescCannotHeal(value)

def EffectDescDoubleDamage():
	"""
	EffectDescDoubleDamage Gets Go Variable: ruby.EffectDescDoubleDamage
	EffectDescDoubleDamage is a description of [EffectDoubleDamage]
	
	"""
	return game.EffectDescription(handle=_game.ruby_EffectDescDoubleDamage())

def Set_EffectDescDoubleDamage(value):
	"""
	Set_EffectDescDoubleDamage Sets Go Variable: ruby.EffectDescDoubleDamage
	EffectDescDoubleDamage is a description of [EffectDoubleDamage]
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_EffectDescDoubleDamage(value.handle)
	else:
		_game.ruby_Set_EffectDescDoubleDamage(value)

def SkillDance():
	"""
	SkillDance Gets Go Variable: ruby.SkillDance
	Double all of your damage.
	Lasts 2 turns.
	
	"""
	return game.SkillData(handle=_game.ruby_SkillDance())

def Set_SkillDance(value):
	"""
	Set_SkillDance Sets Go Variable: ruby.SkillDance
	Double all of your damage.
	Lasts 2 turns.
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_SkillDance(value.handle)
	else:
		_game.ruby_Set_SkillDance(value)

def SkillExecute():
	"""
	SkillExecute Gets Go Variable: ruby.SkillExecute
	If your opponent's at less than 10% of their max HP, defeat them instantly.
	While Stop effect is active, the threshold goes to 20% of opponent's max hp.
	
	"""
	return game.SkillData(handle=_game.ruby_SkillExecute())

def Set_SkillExecute(value):
	"""
	Set_SkillExecute Sets Go Variable: ruby.SkillExecute
	If your opponent's at less than 10% of their max HP, defeat them instantly.
	While Stop effect is active, the threshold goes to 20% of opponent's max hp.
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_SkillExecute(value.handle)
	else:
		_game.ruby_Set_SkillExecute(value)

def SkillRage():
	"""
	SkillRage Gets Go Variable: ruby.SkillRage
	Deal 24 - 2 * your turn number Red damage.
	
	"""
	return game.SkillData(handle=_game.ruby_SkillRage())

def Set_SkillRage(value):
	"""
	Set_SkillRage Sets Go Variable: ruby.SkillRage
	Deal 24 - 2 * your turn number Red damage.
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_SkillRage(value.handle)
	else:
		_game.ruby_Set_SkillRage(value)

def SkillStop():
	"""
	SkillStop Gets Go Variable: ruby.SkillStop
	Every player can not heal until the end of their next turn.
	While this is active for you, .Execute becomes stronger.
	Cooldown 1.
	
	"""
	return game.SkillData(handle=_game.ruby_SkillStop())

def Set_SkillStop(value):
	"""
	Set_SkillStop Sets Go Variable: ruby.SkillStop
	Every player can not heal until the end of their next turn.
	While this is active for you, .Execute becomes stronger.
	Cooldown 1.
	
	"""
	if isinstance(value, go.GoClass):
		_game.ruby_Set_SkillStop(value.handle)
	else:
		_game.ruby_Set_SkillStop(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct ruby.EffectCannotHeal
class EffectCannotHeal(common.DurationExpirable):
	"""Prevents you from healing.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.ruby_EffectCannotHeal_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ruby.EffectCannotHeal{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ruby.EffectCannotHeal ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.ruby_EffectCannotHeal_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.ruby_EffectCannotHeal_Clone(self.handle))
	def IsHealAllowed(self, heal):
		"""IsHealAllowed(int heal) bool
		
		IsHealAllowed reports whether the healing is allowed based on provided amount of healing.
		"""
		return _game.ruby_EffectCannotHeal_IsHealAllowed(self.handle, heal)

# Python type for struct ruby.EffectDoubleDamage
class EffectDoubleDamage(common.DurationExpirable):
	"""Doubles the damage you deal.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.ruby_EffectDoubleDamage_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ruby.EffectDoubleDamage{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'ruby.EffectDoubleDamage ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.ruby_EffectDoubleDamage_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.ruby_EffectDoubleDamage_Clone(self.handle))
	def ModifyDealtDamage(self, dmg, colour):
		"""ModifyDealtDamage(int dmg, int colour) int
		
		ModifyDealtDamage returns the modified amount of damage based on provided amount of damage and damage colour.
		"""
		return _game.ruby_EffectDoubleDamage_ModifyDealtDamage(self.handle, dmg, colour)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewEffectCannotHeal(turnState, isOpp):
	"""NewEffectCannotHeal(object turnState, bool isOpp) object"""
	return EffectCannotHeal(handle=_game.ruby_NewEffectCannotHeal(turnState.handle, isOpp))
def NewEffectDoubleDamage(turnState):
	"""NewEffectDoubleDamage(object turnState) object"""
	return EffectDoubleDamage(handle=_game.ruby_NewEffectDoubleDamage(turnState.handle))


# ---- Functions ---


