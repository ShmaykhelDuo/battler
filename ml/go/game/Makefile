# Makefile for python interface for package game.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

GOCMD=go
GOBUILD=$(GOCMD) build -mod=mod
GOIMPORTS=goimports
PYTHON=/home/andrey/Documents/coding/battler/.venv/bin/python
LIBEXT=.so

# get the CC and flags used to build python:
GCC = $(shell $(GOCMD) env CC)
CFLAGS = "-I/usr/include/python3.9"
LDFLAGS = "-L/usr/lib" "-lpython3.9" -lcrypt -ldl  -lm -lm

all: gen build

gen:
	gopy pkg -no-make -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

build:
	# build target builds the generated files -- this is what gopy build does..
	# this will otherwise be built during go build and may be out of date
	- rm game.c
	# goimports is needed to ensure that the imports list is valid
	$(GOIMPORTS) -w game.go
	# generate game_go$(LIBEXT) from game.go -- the cgo wrappers to go functions
	$(GOBUILD) -buildmode=c-shared -o game_go$(LIBEXT) game.go
	# use pybindgen to build the game.c file which are the CPython wrappers to cgo wrappers..
	# note: pip install pybindgen to get pybindgen if this fails
	$(PYTHON) build.py
	# build the _game$(LIBEXT) library that contains the cgo and CPython wrappers
	# generated game.py python wrapper imports this c-code package
	
	$(GCC) game.c  game_go$(LIBEXT) -o _game$(LIBEXT) $(CFLAGS) $(LDFLAGS) -fPIC --shared -w
	


