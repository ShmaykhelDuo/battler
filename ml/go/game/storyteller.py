
# python wrapper for package github.com/ShmaykhelDuo/battler/internal/game/characters/storyteller within overall package game
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -exclude=model,ml1,ml2,moveml ../../internal/game ../../internal/bot context encoding/json

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _game
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from game import storyteller
# and then refer to everything using storyteller. prefix
# packages imported by this package listed below:

from . import game
from . import common



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---
SkillMyStoryIndex = 3
SkillYourColourIndex = 1
SkillYourDreamIndex = 2
SkillYourNumberIndex = 0


# ---- Global Variables: can only use functions to access ---
def CharacterStoryteller():
	"""
	CharacterStoryteller Gets Go Variable: storyteller.CharacterStoryteller
	
	"""
	return game.CharacterData(handle=_game.storyteller_CharacterStoryteller())

def Set_CharacterStoryteller(value):
	"""
	Set_CharacterStoryteller Sets Go Variable: storyteller.CharacterStoryteller
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_CharacterStoryteller(value.handle)
	else:
		_game.storyteller_Set_CharacterStoryteller(value)

def EffectDescCannotUse():
	"""
	EffectDescCannotUse Gets Go Variable: storyteller.EffectDescCannotUse
	EffectDescCannotUse is a description of [EffectCannotUse]
	
	"""
	return game.EffectDescription(handle=_game.storyteller_EffectDescCannotUse())

def Set_EffectDescCannotUse(value):
	"""
	Set_EffectDescCannotUse Sets Go Variable: storyteller.EffectDescCannotUse
	EffectDescCannotUse is a description of [EffectCannotUse]
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_EffectDescCannotUse(value.handle)
	else:
		_game.storyteller_Set_EffectDescCannotUse(value)

def EffectDescControlled():
	"""
	EffectDescControlled Gets Go Variable: storyteller.EffectDescControlled
	EffectDescControlled is a description of [EffectControlled]
	
	"""
	return game.EffectDescription(handle=_game.storyteller_EffectDescControlled())

def Set_EffectDescControlled(value):
	"""
	Set_EffectDescControlled Sets Go Variable: storyteller.EffectDescControlled
	EffectDescControlled is a description of [EffectControlled]
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_EffectDescControlled(value.handle)
	else:
		_game.storyteller_Set_EffectDescControlled(value)

def SkillMyStory():
	"""
	SkillMyStory Gets Go Variable: storyteller.SkillMyStory
	Next turn, you decide which skills your opponent uses.
	Unlocks on turn 7.
	Cooldown 1.
	
	"""
	return game.SkillData(handle=_game.storyteller_SkillMyStory())

def Set_SkillMyStory(value):
	"""
	Set_SkillMyStory Sets Go Variable: storyteller.SkillMyStory
	Next turn, you decide which skills your opponent uses.
	Unlocks on turn 7.
	Cooldown 1.
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_SkillMyStory(value.handle)
	else:
		_game.storyteller_Set_SkillMyStory(value)

def SkillYourColour():
	"""
	SkillYourColour Gets Go Variable: storyteller.SkillYourColour
	Next turn, your opponent can't use the skills of the same colour they used last. Deal 15 damage of that colour.
	Unlocks when your opponent uses a skill.
	Cooldown: 1.
	
	"""
	return game.SkillData(handle=_game.storyteller_SkillYourColour())

def Set_SkillYourColour(value):
	"""
	Set_SkillYourColour Sets Go Variable: storyteller.SkillYourColour
	Next turn, your opponent can't use the skills of the same colour they used last. Deal 15 damage of that colour.
	Unlocks when your opponent uses a skill.
	Cooldown: 1.
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_SkillYourColour(value.handle)
	else:
		_game.storyteller_Set_SkillYourColour(value)

def SkillYourDream():
	"""
	SkillYourDream Gets Go Variable: storyteller.SkillYourDream
	Heal for (your max HP - your opponent's number) / your turn number.
	If your opponent's number is more than 83, subtract a flat number as if it was 83.
	
	"""
	return game.SkillData(handle=_game.storyteller_SkillYourDream())

def Set_SkillYourDream(value):
	"""
	Set_SkillYourDream Sets Go Variable: storyteller.SkillYourDream
	Heal for (your max HP - your opponent's number) / your turn number.
	If your opponent's number is more than 83, subtract a flat number as if it was 83.
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_SkillYourDream(value.handle)
	else:
		_game.storyteller_Set_SkillYourDream(value)

def SkillYourNumber():
	"""
	SkillYourNumber Gets Go Variable: storyteller.SkillYourNumber
	Deal 10 + the remainder of your opponent's number divided by 7 Orange damage.
	
	"""
	return game.SkillData(handle=_game.storyteller_SkillYourNumber())

def Set_SkillYourNumber(value):
	"""
	Set_SkillYourNumber Sets Go Variable: storyteller.SkillYourNumber
	Deal 10 + the remainder of your opponent's number divided by 7 Orange damage.
	
	"""
	if isinstance(value, go.GoClass):
		_game.storyteller_Set_SkillYourNumber(value.handle)
	else:
		_game.storyteller_Set_SkillYourNumber(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct storyteller.EffectCannotUse
class EffectCannotUse(common.DurationExpirable):
	"""You can't use skills of the same colour you used last.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.storyteller_EffectCannotUse_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'storyteller.EffectCannotUse{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'storyteller.EffectCannotUse ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.storyteller_EffectCannotUse_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.storyteller_EffectCannotUse_Clone(self.handle))
	def Colour(self):
		"""Colour() int
		
		Colour returns the forbidden skills' colour.
		"""
		return _game.storyteller_EffectCannotUse_Colour(self.handle)
	def IsSkillAvailable(self, s):
		"""IsSkillAvailable(object s) bool
		
		IsSkillAvailable reports whether the skill can be used.
		"""
		return _game.storyteller_EffectCannotUse_IsSkillAvailable(self.handle, s.handle)

# Python type for struct storyteller.EffectControlled
class EffectControlled(common.DurationExpirable):
	"""This turn, your opponent chooses which skills you use.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_game.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_game.IncRef(self.handle)
		else:
			self.handle = _game.storyteller_EffectControlled_CTor()
			_game.IncRef(self.handle)
	def __del__(self):
		_game.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'storyteller.EffectControlled{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'storyteller.EffectControlled ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	def Desc(self):
		"""Desc() object
		
		Desc returns the effect's description.
		"""
		return game.EffectDescription(handle=_game.storyteller_EffectControlled_Desc(self.handle))
	def Clone(self):
		"""Clone() object
		
		Clone returns a clone of the effect.
		"""
		return game.Effect(handle=_game.storyteller_EffectControlled_Clone(self.handle))
	def HasTakenControl(self):
		"""HasTakenControl() bool
		
		HasTakenControl reports whether the opponent has taken control over the character.
		"""
		return _game.storyteller_EffectControlled_HasTakenControl(self.handle)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewEffectCannotUse(turnState, colour):
	"""NewEffectCannotUse(object turnState, int colour) object
	
	NewEffectCannotUse returns a new [EffectCannotUse] of provided colour.
	"""
	return EffectCannotUse(handle=_game.storyteller_NewEffectCannotUse(turnState.handle, colour))
def NewEffectControlled(turnState):
	"""NewEffectControlled(object turnState) object"""
	return EffectControlled(handle=_game.storyteller_NewEffectControlled(turnState.handle))


# ---- Functions ---


